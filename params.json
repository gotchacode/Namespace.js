{"name":"Namespace.js","tagline":"Namespacing library for javascript","body":"# Namespace.js\r\n\r\nNamespace.js is a small javascript script which provide namespacing utilities. \r\nIt is framework independent. It also allows you to remotely include files.\r\n\r\nFeatures:\r\n\r\n - Simple API\r\n - Framework independent\r\n - Remote file loading (synchronously or async)\r\n - Tested against Firefox 3.x, Safari 3.x, IE 6/7 and Opera 9.5\r\n - Highly configurable\r\n - Events\r\n - Optionally add methods to native objects\r\n\r\n## Creating namespaces\r\n\r\nNamespace can be created using the `Namespace()` function.\r\n\r\n    Namespace('com.example');\r\n    com.example.MyClass = function() {};\r\n\r\nRather than defining all elements of your namespace like in the previous example you can specify as the \r\nsecond argument an object. All its properties will be added to the namespace.\r\n\r\n    Namespace('com.example', {\r\n       MyClass: function() {}\r\n    });\r\n    var obj = new com.example.MyClass();\r\n\r\nDefining multiple times the same namespace won't erase previously defined objects but add them.\r\n\r\n    Namespace('com.example', {\r\n       MyClass: function() {}\r\n    });\r\n    Namespace('com.example', {\r\n       MySuperClass: function() {}\r\n    });\r\n    var obj = new com.example.MyClass();\r\n    var obj2 = new com.example.MySuperClass();\r\n\r\nThe namespace separator can be modified by setting `Namespace.separator`.\r\n\r\n    Namespace.separator = '/';\r\n    Namespace('com/example');\r\n\r\nYou can test if a namespace already exists by using `Namespace.exist()`.\r\n\r\n    if (Namespace.exist('com.example')) {\r\n    }\r\n\r\n## Importing objects\r\n\r\nWhen using namespaces, it is a common practice to import commonly used objects in the global namespace \r\nto avoid typing the full qualified name each time. This can be achieve using `Namespace.use()`.\r\n\r\n    Namespace.use('com.example.MyClass');\r\n    var obj = new MyClass();\r\n\r\nYou can also use the `with` javascript instruction for temporary importation.\r\n\r\n    with(com.example) {\r\n       var obj = new MyClass();\r\n    }\r\n\r\nYou can import all elements of a namespace using _\\*_ as the last namespace segment.\r\n\r\n    Namespace.use('com.example.*');\r\n    var obj = new MyClass();\r\n\r\nInstead of a string you can use an array to specify multiple namespaces to import.\r\n\r\n    Namespace.use(['com.example.FirstClass', 'com.example.SecondClass']);\r\n\r\n## Including remote scripts\r\n\r\nNamespace.js can include remote scripts using a namespace identifier with the \r\n`Namespace.include()` function.\r\n\r\n    Namespace.include('com.example');\r\n    var obj = new com.example.MyClass();\r\n\r\nThe uri is constructed by converting dots to slashes and adding .js as the end. \r\nThus in the previous example, the file would have been _com/example.js_.\r\nThe function will return true for success, false otherwise.\r\n\r\nIn the previous example, the file is loaded synchronously. Asynchronous loading is also \r\nsupported if a callback is defined as the second argument.\r\n\r\n    Namespace.include('com.example', function() {\r\n       var obj = new com.example.MyClass();\r\n    });\r\n\r\nA second callback can be defined as the third argument. It will be called only if an error occurs.\r\n\r\n    Namespace.include('com.example', function() {\r\n       var obj = new com.example.MyClass();\r\n    }, function() {\r\n       alert('an error occured loading com.example');\r\n    });\r\n\r\nA base uri can be specified in `Namespace.baseUri`. \r\nIt will be prepended to all uris. It must end with a slash.\r\n\r\n    Namespace.baseUri = './assets/js/';\r\n\r\nThe mapping between namespaces and filenames can be override by overriding the \r\n`Namespace.mapIdentifierToUri` function. It takes as parameter a namespace \r\nstring and must return an uri.\r\n\r\n    Namespace.mapIdentifierToUri = function(identifier) {\r\n        return 'foo.js';\r\n    };\r\n\r\nPackaging multiple scripts into a single one for production is a common practice but can \r\nlead to problem when using includes. This is resolved using `Namespace.provide()`. \r\nCall this function with a namespace identifier specifying an already loaded namespace.\r\n\r\n    Namespace.provide('com.example');\r\n    Namespace.include('com.example'); // won't load any script\r\n\r\nAn array can also be used to specify multiple namespaces at once.\r\n\r\n## Auto include\r\n\r\nWhen using `Namespace.use()`, if the targeted element is not found, it will be \r\nautomatically included by default. This can be disabled by setting false to `Namespace.autoInclude`. \r\nIt can also be disabled on a pair call basis setting false as the third argument of `Namespace.use()`.\r\n\r\n    Namespace.use('com.example', false, false);\r\n    // or\r\n    Namespace.autoInclude = false;\r\n\r\nThe file can be included asynchronously by specifying a callback as the second argument.\r\n\r\n    // include async com/example/MyClass.js\r\n    Namespace.use('com.example.MyClass', function() {\r\n       var obj = new MyClass();\r\n    });\r\n\r\nYou can see that using include() with use() means that there must be one file per namespace element. \r\nThis can be avoided by using `Namespace.from().use()`\r\n\r\n    // include async com/example.js\r\n    Namespace.from('com.example').use('com.example.MyClass', function() {\r\n       var obj = new MyClass();\r\n    });\r\n\r\nThe namespace in use() can be specified relatively to the namespace in from() when starting with a dot.\r\n\r\n    // include sync com/example.js\r\n    Namespace.from('com.example').use('.MyClass');\r\n    var obj = new MyClass();\r\n\r\nWhen auto including, no error callback can be specified. You must use events (see after) to catch the errors.\r\nIf the `*` character is used, auto loading won't be use. \r\nOnly elements from already included scripts will be imported.\r\n\r\n## Native extensions\r\n\r\nOptionally you can add methods to javascript's native objects using `Namespace.registerNativeExtensions()`.\r\n\r\nMethods are:\r\n\r\n - String.namespace()\r\n - String.use()\r\n - String.include()\r\n - String.from()\r\n - String.provide()\r\n - Array.use()\r\n - Array.provide()\r\n\r\nThere are the same as their Namespace.`*` equivalent but do not take the namespace identifier as the first argument.\r\n\r\n    'com.example'.namespace({\r\n       MyClass: function() {}\r\n    });\r\n\r\n    'com.example.MyClass'.use();\r\n    var obj = new MyClass();\r\n\r\n    ['com.example.FirstClass', 'com.example.SecondClass'].use()\r\n\r\n    'com.remote'.include();\r\n\r\n## Events\r\n\r\nEvents are fired when actions occured. You can register listeners with `Namespace.addEventListener()` and \r\nremove them using `Namespace.removeEventListener()`. Both functions take as first argument the event \r\nname and as second a function. The function will receive an event object.\r\n\r\n### create\r\n\r\nFired after a namespace has been created\r\n\r\nProperties:\r\n\r\n - identifier: the namespace identifier that has been created\r\n\r\n    Namespace.addEventListener('create', function(event) {\r\n       alert(event.identifier);\r\n    });\r\n\r\n### use\r\n\r\nFired after a namespace element has been imported\r\n\r\nProperties:\r\n\r\n - identifier: the namespace identifier that has been imported\r\n\r\nExample:\r\n\r\n    Namespace.addEventListener('use', function(event) {\r\n       alert(event.identifier);\r\n    });\r\n\r\n### include\r\n\r\nFired after a namespace has been included (before the callback is called when async).\r\n\r\nProperties:\r\n\r\n - identifier: the namespace identifier\r\n - uri: the file uri\r\n - async: whether the file has been loaded asynchronously\r\n - callback: the callback to call on success\r\n\r\nExample:\r\n\r\n    Namespace.addEventListener('include', function(event) {\r\n       alert(event.identifier);\r\n       alert(event.uri);\r\n       alert(event.async);\r\n       alert(event.callback);\r\n    });\r\n\r\n### includeError\r\n\r\nFired when <code>include()</code> fails to load the file (fired before the error callback is called when async).\r\n\r\nProperties:\r\n\r\n - identifier: the namespace identifier\r\n - uri: the file uri\r\n - async: whether the file has been loaded asynchronously\r\n - callback: the callback to call on success\r\n\r\nExample:\r\n\r\n    Namespace.addEventListener('include', function(event) {\r\n       alert(event.identifier);\r\n       alert(event.uri);\r\n       alert(event.async);\r\n       alert(event.callback);\r\n    });\r\n\r\n### provide\r\n\r\nFired when <code>provide()</code> is called.\r\n\r\nProperties:\r\n\r\n - identifier: the namespace identifier\r\n\r\nExample:\r\n\r\n    Namespace.addEventListener('provide', function(event) {\r\n       alert(event.identifier);\r\n    });","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}